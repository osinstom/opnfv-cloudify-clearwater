#######################################################################
#
#   Copyright (c) 2017 Orange
#   valentin.boucher@orange.com
#
# All rights reserved. This program and the accompanying materials
# are made available under the terms of the Apache License, Version 2.0
# which accompanies this distribution, and is available at
# http://www.apache.org/licenses/LICENSE-2.0
########################################################################

########################################################################
# This Blueprint deploy the clearwater IMS on an openstack environment
########################################################################

tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.0.1/types.yaml
  - http://www.getcloudify.org/spec/openstack-plugin/2.0.1/plugin.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.3/plugin.yaml
  - types/monitoring.yaml
  - types/clearwater.yaml
  - types/bind.yaml

inputs:

  image_id:
    type: string
    description: Image ID of the agent VM's (Ubuntu 14.04 for clearwater)

  flavor_id:
    type: string
    description: Flavor ID of the agent VM's (RAM >= 2 GB)

  agent_user:
    type: string
    default: ubuntu
    description: User for connecting to agent VM's

  network_name:
    description: Openstack network name the new server will be connected to
    default: net2

  external_network_name:
    type: string
    description: Network that will be the floating IP

  public_domain:
    type: string
    description: Sip domain for sip users and bono load-balancing

  release:
    type: string
    default: stable
    description: Clearwater release

  key_pair_name:
    default: clearwater-key
    description: Openstack key pair name of the key to associate with the new server

  private_key_path:
    description: |
      Path to the private key which will be used for connecting to the server
      on the manager or machine running CLI if running in local mode.

  with_ellis:
    type: integer
    description: 1 for true 0 for false
    default: 1

  bono_cluster_size:
    type: integer
    description: number of bono instance
    default: 1

  sprout_cluster_size:
    type: integer
    description: number of sprout instance
    default: 1

  dime_cluster_size:
    type: integer
    description: number of dime instance
    default: 1

  vellum_cluster_size:
    type: integer
    description: number of vellum instance
    default: 1

  homer_cluster_size:
    type: integer
    description: number of homer instance
    default: 1

dsl_definitions:

  openstack_config: &openstack_config
    username: { get_secret: keystone_username }
    password: { get_secret: keystone_password }
    tenant_name: { get_secret: keystone_tenant_name }
    auth_url: { get_secret: keystone_url }
    #region: { get_secret: region }
    #user_domain_name: { get_secret: user_domain_name }
    #project_domain_name: { get_secret: project_domain_name }
    custom_configuration:
      keystone_client:
        insecure: true
      nova_client:
        insecure: true
      neutron_client:
        insecure: true
      cinder_client:
        insecure: true

node_types:

  # Global types for VMs
  #   - specifies defaults flavor, image and user agent to use for VMs
  #   - install monitoring agent on VMs
  #   - adding some monitoring collectors (CPU, RAM, DISK and Network)

  clearwater.nodes.MonitoredServer:
    derived_from: cloudify.openstack.nodes.Server
    properties:
      openstack_config:
        default: *openstack_config
      cloudify_agent:
        default:
          user: { get_input: agent_user }
          key: { get_property: [ keypair, private_key_path ] }
      image:
        default: { get_input: image_id }
      flavor:
        default: { get_input: flavor_id }
      management_network_name:
        default: { get_input: network_name }
    interfaces:
      cloudify.interfaces.monitoring_agent:
        install:
          implementation: diamond.diamond_agent.tasks.install
          inputs:
            diamond_config:
              default:
                interval: 5
        start: diamond.diamond_agent.tasks.start
        stop: diamond.diamond_agent.tasks.stop
        uninstall: diamond.diamond_agent.tasks.uninstall

      cloudify.interfaces.monitoring:
          start:
            implementation: diamond.diamond_agent.tasks.add_collectors
            inputs:
              collectors_config:
                default:
                  CPUCollector: {}
                  MemoryCollector: {}
                  LoadAverageCollector: {}
                  DiskUsageCollector:
                    config:
                      devices: x?vd[a-z]+[0-9]*$
                  NetworkCollector: {}

node_templates:

  keypair:
    type: cloudify.openstack.nodes.KeyPair
    properties:
      openstack_config: *openstack_config
      resource_id: { get_input: key_pair_name }
      use_external_resource: true
      private_key_path: { get_input: private_key_path }

  # Declare host VMs and attach them at floating ip or security group
  sprout_host:
    type: clearwater.nodes.MonitoredServer
    capabilities:
      scalable:
        properties:
          default_instances: { get_input: sprout_cluster_size }
    relationships:
      - type: cloudify.openstack.server_connected_to_keypair
        target: keypair

      - target: base_security_group
        type: cloudify.openstack.server_connected_to_security_group

      - target: internal_sip_security_group
        type: cloudify.openstack.server_connected_to_security_group

      - target: sprout_security_group
        type: cloudify.openstack.server_connected_to_security_group


  bono_host:
    type: clearwater.nodes.MonitoredServer
    relationships:
      - type: cloudify.openstack.server_connected_to_keypair
        target: keypair

      - target: base_security_group
        type: cloudify.openstack.server_connected_to_security_group

      - target: bono_security_group
        type: cloudify.openstack.server_connected_to_security_group

      - target: internal_sip_security_group
        type: cloudify.openstack.server_connected_to_security_group

      - type: cloudify.openstack.server_connected_to_floating_ip
        target: bono_floatingip

  ellis_host:
    type: clearwater.nodes.MonitoredServer
    capabilities:
      scalable:
        properties:
          default_instances: { get_input: with_ellis }
    relationships:
      - type: cloudify.openstack.server_connected_to_keypair
        target: keypair

      - target: base_security_group
        type: cloudify.openstack.server_connected_to_security_group

      - target: ellis_security_group
        type: cloudify.openstack.server_connected_to_security_group

      - type: cloudify.openstack.server_connected_to_floating_ip
        target: ellis_floatingip

  vellum_host:
    type: clearwater.nodes.MonitoredServer
    capabilities:
      scalable:
        properties:
          default_instances: { get_input: vellum_cluster_size }
    relationships:
      - type: cloudify.openstack.server_connected_to_keypair
        target: keypair

      - target: base_security_group
        type: cloudify.openstack.server_connected_to_security_group

      - target: vellum_security_group
        type: cloudify.openstack.server_connected_to_security_group

  dime_host:
    type: clearwater.nodes.MonitoredServer
    capabilities:
      scalable:
        properties:
          default_instances: { get_input: dime_cluster_size }
    relationships:
      - type: cloudify.openstack.server_connected_to_keypair
        target: keypair

      - target: base_security_group
        type: cloudify.openstack.server_connected_to_security_group

      - target: dime_security_group
        type: cloudify.openstack.server_connected_to_security_group

  homer_host:
    type: clearwater.nodes.MonitoredServer
    capabilities:
      scalable:
        properties:
          default_instances: { get_input: homer_cluster_size }
    relationships:
      - type: cloudify.openstack.server_connected_to_keypair
        target: keypair

      - target: base_security_group
        type: cloudify.openstack.server_connected_to_security_group

      - target: homer_security_group
        type: cloudify.openstack.server_connected_to_security_group

  bind_host:
    type: clearwater.nodes.MonitoredServer
    capabilities:
      scalable:
        properties:
          min_instances: 1
          max_instances: 1
    relationships:
      - type: cloudify.openstack.server_connected_to_keypair
        target: keypair

      - target: base_security_group
        type: cloudify.openstack.server_connected_to_security_group

      - target: bind_security_group
        type: cloudify.openstack.server_connected_to_security_group

      - type: cloudify.openstack.server_connected_to_floating_ip
        target: bind_floatingip

  proxy_host:
    type: cloudify.openstack.nodes.Server
    capabilities:
      scalable:
        properties:
          min_instances: 1
          max_instances: 1
    properties:
      cloudify_agent:
          user: { get_input: agent_user }
          key: { get_property: [ keypair, private_key_path ] }
      image: { get_input: image_id }
      flavor: { get_input: flavor_id }
      management_network_name: { get_input: network_name }
      openstack_config: *openstack_config
    interfaces:
      cloudify.interfaces.monitoring_agent:
        install:
          implementation: diamond.diamond_agent.tasks.install
          inputs:
            diamond_config:
              interval: 10
        start: diamond.diamond_agent.tasks.start
        stop: diamond.diamond_agent.tasks.stop
        uninstall: diamond.diamond_agent.tasks.uninstall
    relationships:
      - type: cloudify.openstack.server_connected_to_keypair
        target: keypair

  # Declare clearwater and other software
  sprout:
    type: clearwater.nodes.sprout
    properties:
      private_domain: clearwater.local
      release: { get_input: release }
    relationships:
      - type: cloudify.relationships.contained_in
        target: sprout_host
      - type: app_connected_to_bind
        target: bind
      - type: monitors_sprout_nodes
        target: proxy_node

  bono:
    type: clearwater.nodes.bono
    properties:
      private_domain: clearwater.local
      release: { get_input: release }
    relationships:
      - type: cloudify.relationships.contained_in
        target: bono_host
      - type: app_connected_to_bind
        target: bind
      - type: monitors_bono_nodes
        target: proxy_node

  ellis:
    type: clearwater.nodes.ellis
    properties:
      private_domain: clearwater.local
      release: { get_input: release }
    relationships:
      - type: cloudify.relationships.contained_in
        target: ellis_host
      - type: app_connected_to_bind_ellis
        target: bind

  dime:
    type: clearwater.nodes.dime
    properties:
      private_domain: clearwater.local
      release: { get_input: release }
    relationships:
      - type: cloudify.relationships.contained_in
        target: dime_host
      - type: app_connected_to_bind
        target: bind

  vellum:
    type: clearwater.nodes.vellum
    properties:
      private_domain: clearwater.local
      release: { get_input: release }
    relationships:
      - type: cloudify.relationships.contained_in
        target: vellum_host
      - type: app_connected_to_bind
        target: bind

  homer:
    type: clearwater.nodes.homer
    properties:
      private_domain: clearwater.local
      release: { get_input: release }
    relationships:
      - type: cloudify.relationships.contained_in
        target: homer_host
      - type: app_connected_to_bind
        target: bind

  bind:
    type: clearwater.infra.bind
    properties:
      private_domain: clearwater.local
      release: { get_input: release }
      public_domain: { get_input: public_domain }
      secret_code: secret
    relationships:
      - type: cloudify.relationships.contained_in
        target: bind_host

  proxy_node:
    type: SNMPProxy
    relationships:
      - type: cloudify.relationships.contained_in
        target: proxy_host

  # Declare all security groups for clearwater and other nodes
  base_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: clearwater-sg_base
        description: SSH
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: 22
        - remote_ip_prefix: 0.0.0.0/0
          port: 4000
        - remote_ip_prefix: 0.0.0.0/0
          port: 2380
        - remote_ip_prefix: 0.0.0.0/0
          port: 161
          protocol: udp

  bono_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: clearwater-sg_bono
        description: STUN SIP RTP 0MQ
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: 3478
          protocol: tcp
        - remote_ip_prefix: 0.0.0.0/0
          port: 3478
          protocol: udp
        - remote_ip_prefix: 0.0.0.0/0
          port: 5060
          protocol: tcp
        - remote_ip_prefix: 0.0.0.0/0
          port: 5060
          protocol: udp
        - remote_ip_prefix: 0.0.0.0/0
          port: 5062
          protocol: tcp
        - remote_ip_prefix: 0.0.0.0/0
          port_range_min: 32768
          port_range_max: 65535
          protocol: udp
        - remote_ip_prefix: 0.0.0.0/0
          port: 6669
        - remote_ip_prefix: 0.0.0.0/0
          port: 5058
          protocol: tcp

  internal_sip_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: clearwater-sg_internal_sip
        description: Internal SIP signalling
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: 5058
          protocol: tcp
        - remote_ip_prefix: 0.0.0.0/0
          port: 5054
          protocol: tcp
        - remote_ip_prefix: 0.0.0.0/0
          port: 5052
          protocol: tcp

  sprout_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: clearwater-sg_sprout
        description: memcached Chronos 0MQ
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: 9888
          protocol: tcp

  dime_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: clearwater-sg_dime
        description: memcached Chronos REST
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: 8888
          protocol: tcp
        - remote_ip_prefix: 0.0.0.0/0
          port: 8889
          protocol: tcp
        - remote_ip_prefix: 0.0.0.0/0
          port: 10888
          protocol: tcp

  vellum_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: clearwater-sg_vellum
        description: REST Cassandra 0MQ
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: 11211
          protocol: tcp
        - remote_ip_prefix: 0.0.0.0/0
          port: 11311
          protocol: tcp
        - remote_ip_prefix: 0.0.0.0/0
          port: 7253
          protocol: tcp
        - remote_ip_prefix: 0.0.0.0/0
          port: 7000
          protocol: tcp
        - remote_ip_prefix: 0.0.0.0/0
          port: 9160
          protocol: tcp
        - remote_ip_prefix: 0.0.0.0/0
          port_range_min: 6667
          port_range_max: 6668

  homer_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: clearwater-sg_homer
        description: REST Cassandra 0MQ
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: 7888
          protocol: tcp
        - remote_ip_prefix: 0.0.0.0/0
          port: 9160
          protocol: tcp

  ellis_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    capabilities:
      scalable:
        properties:
          default_instances: { get_input: with_ellis }
    properties:
      openstack_config: *openstack_config
      security_group:
        name: clearwater-sg_ellis
        description: Web UI
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: 80
          protocol: tcp
        - remote_ip_prefix: 0.0.0.0/0
          port: 443
          protocol: tcp

  bind_security_group:
    type: cloudify.openstack.nodes.SecurityGroup
    properties:
      openstack_config: *openstack_config
      security_group:
        name: clearwater-sg_bind
        description: DNS
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          port: 53
          protocol: udp
        - remote_ip_prefix: 0.0.0.0/0
          port: 53

  # Declare floating IP for bono, bind and ellis nodes
  bono_floatingip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_input: external_network_name }

  bind_floatingip:
    type: cloudify.openstack.nodes.FloatingIP
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_input: external_network_name }

  ellis_floatingip:
    type: cloudify.openstack.nodes.FloatingIP
    capabilities:
      scalable:
        properties:
          default_instances: { get_input: with_ellis }
    properties:
      openstack_config: *openstack_config
      floatingip:
        floating_network_name: { get_input: external_network_name }


groups:
  bono_group:
    members: [bono_host, bono_floatingip]

policies:
  scale_bono:
    type: cloudify.policies.scaling
    properties:
      default_instances: { get_input: bono_cluster_size }
    targets: [bono_group]

outputs:
  dns_ip:
    value: { get_attribute: [bind_floatingip, floating_ip_address] }
  ellis_ip:
    value: { get_attribute: [ellis_floatingip, floating_ip_address] }
